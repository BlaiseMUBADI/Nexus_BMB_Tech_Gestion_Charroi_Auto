package nexus_bmb_soft.database;

import nexus_bmb_soft.database.dao.VehiculeDAO;
import nexus_bmb_soft.models.Vehicule;
import java.time.LocalDate;
import java.util.List;
import java.util.logging.Logger;

/**
 * Classe utilitaire pour tester la configuration de la base de donn√©es
 * 
 * @author BlaiseMUBADI
 */
public class DatabaseTester {
    
    private static final Logger LOGGER = Logger.getLogger(DatabaseTester.class.getName());
    
    /**
     * Test complet de la base de donn√©es
     */
    public static void runFullTest() {
        LOGGER.info("üß™ === TESTS BASE DE DONN√âES CHARROI AUTO ===");
        
        // Test 1: Connexion WAMP
        testWampConnection();
        
        // Test 2: Initialisation base
        testDatabaseInitialization();
        
        // Test 3: CRUD V√©hicules
        testVehiculeOperations();
        
        LOGGER.info("üèÅ === TESTS TERMIN√âS ===");
    }
    
    /**
     * Test de connexion WAMP
     */
    private static void testWampConnection() {
        LOGGER.info("\nüîç Test 1: Connexion WAMP MySQL 8.2.0");
        
        if (DatabaseConnection.isWampRunning()) {
            LOGGER.info("‚úÖ WAMP est d√©marr√© et MySQL accessible");
            
            if (DatabaseConnection.testConnection()) {
                LOGGER.info("‚úÖ Connexion √† la base de donn√©es r√©ussie");
                LOGGER.info(DatabaseConnection.getConnectionInfo());
            } else {
                LOGGER.warning("‚ùå Probl√®me de connexion √† la base");
            }
        } else {
            LOGGER.warning("‚ö†Ô∏è WAMP n'est pas d√©marr√© !");
            LOGGER.info("üí° Veuillez d√©marrer WAMP avant de continuer");
        }
    }
    
    /**
     * Test d'initialisation de la base
     */
    private static void testDatabaseInitialization() {
        LOGGER.info("\nüöÄ Test 2: Initialisation Base de Donn√©es");
        
        DatabaseManager.checkDatabaseStatus();
        
        if (DatabaseManager.initializeDatabase()) {
            LOGGER.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s");
        } else {
            LOGGER.warning("‚ùå √âchec de l'initialisation");
        }
    }
    
    /**
     * Test des op√©rations CRUD sur les v√©hicules
     */
    private static void testVehiculeOperations() {
        LOGGER.info("\nüöó Test 3: Op√©rations CRUD V√©hicules");
        
        VehiculeDAO vehiculeDAO = new VehiculeDAO();
        
        // Test lecture
        LOGGER.info("üìã Lecture de tous les v√©hicules:");
        List<Vehicule> vehicules = vehiculeDAO.getTousVehicules();
        for (Vehicule v : vehicules) {
            LOGGER.info("  ‚Ä¢ " + v.toString());
        }
        
        // Test statistiques
        VehiculeDAO.VehiculeStats stats = vehiculeDAO.getStatistiques();
        LOGGER.info("üìä Statistiques: " + stats.toString());
        
        // Test recherche
        LOGGER.info("üîç Test recherche 'Toyota':");
        List<Vehicule> recherche = vehiculeDAO.rechercherVehicules("Toyota");
        LOGGER.info("  Trouv√©: " + recherche.size() + " v√©hicule(s)");
        
        // Test v√©hicules disponibles
        LOGGER.info("‚úÖ V√©hicules disponibles:");
        List<Vehicule> disponibles = vehiculeDAO.getVehiculesDisponibles();
        LOGGER.info("  Nombre disponibles: " + disponibles.size());
    }
    
    /**
     * Test rapide de connexion seulement
     */
    public static boolean quickConnectionTest() {
        LOGGER.info("‚ö° Test rapide de connexion...");
        
        if (!DatabaseConnection.isWampRunning()) {
            LOGGER.warning("‚ùå WAMP non d√©marr√©");
            return false;
        }
        
        if (!DatabaseConnection.testConnection()) {
            LOGGER.warning("‚ùå Connexion √©chou√©e");
            return false;
        }
        
        LOGGER.info("‚úÖ Connexion OK");
        return true;
    }
    
    /**
     * Main pour test ind√©pendant
     */
    public static void main(String[] args) {
        System.out.println("üöÄ Test de la configuration base de donn√©es");
        System.out.println("===========================================");
        
        runFullTest();
    }
}