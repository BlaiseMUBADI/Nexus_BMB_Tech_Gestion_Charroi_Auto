import nexus_bmb_soft.database.dao.VehiculeDAO;
import nexus_bmb_soft.database.dao.AffectationDAO;
import nexus_bmb_soft.models.Vehicule;

public class TestSynchronisationDisponibilite {
    public static void main(String[] args) {
        try {
            System.out.println("üß™ Test de synchronisation de la disponibilit√© des v√©hicules...");
            
            VehiculeDAO vehiculeDAO = new VehiculeDAO();
            
            // Afficher l'√©tat avant synchronisation
            System.out.println("\nüìä √âTAT AVANT SYNCHRONISATION:");
            afficherEtatVehicules(vehiculeDAO);
            
            // Synchroniser les disponibilit√©s
            System.out.println("\nüîÑ SYNCHRONISATION EN COURS...");
            vehiculeDAO.synchroniserToutesLesDisponibilites();
            
            // Afficher l'√©tat apr√®s synchronisation
            System.out.println("\nüìä √âTAT APR√àS SYNCHRONISATION:");
            afficherEtatVehicules(vehiculeDAO);
            
            System.out.println("\n‚úÖ Test de synchronisation termin√© !");
            
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors du test de synchronisation:");
            e.printStackTrace();
        }
    }
    
    private static void afficherEtatVehicules(VehiculeDAO vehiculeDAO) {
        try {
            var vehicules = vehiculeDAO.getTousVehicules();
            System.out.println("V√©hicules dans la base:");
            for (Vehicule v : vehicules) {
                boolean realementDispo = vehiculeDAO.estRealementDisponible(v.getId());
                String etatBD = v.isDisponible() ? "DISPONIBLE" : "AFFECT√â";
                String etatReel = realementDispo ? "DISPONIBLE" : "AFFECT√â";
                String indicateur = etatBD.equals(etatReel) ? "‚úÖ" : "‚ùå";
                
                System.out.printf("  %s %s - %s %s (BD: %s, R√©el: %s)%n", 
                    indicateur, v.getMatricule(), v.getMarque(), v.getType(), etatBD, etatReel);
            }
            
            // Compter les disponibles
            long disponiblesBD = vehicules.stream().filter(Vehicule::isDisponible).count();
            long disponiblesReels = vehicules.stream()
                .filter(v -> {
                    try {
                        return vehiculeDAO.estRealementDisponible(v.getId());
                    } catch (Exception e) {
                        return false;
                    }
                }).count();
            
            System.out.printf("  üìä R√©sum√©: %d v√©hicules au total, %d disponibles (BD), %d disponibles (r√©el)%n", 
                vehicules.size(), disponiblesBD, disponiblesReels);
                
        } catch (Exception e) {
            System.err.println("‚ùå Erreur lors de l'affichage des v√©hicules: " + e.getMessage());
        }
    }
}