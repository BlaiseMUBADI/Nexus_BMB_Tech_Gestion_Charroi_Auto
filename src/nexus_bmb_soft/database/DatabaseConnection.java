package nexus_bmb_soft.database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Gestionnaire de connexion √† la base de donn√©es MySQL via WAMP
 * Configuration pour MySQL 8.2.0
 * 
 * @author BlaiseMUBADI
 */
public class DatabaseConnection {
    
    // Configuration WAMP personnalis√©e
    private static final String DB_HOST = "localhost";
    private static final String DB_PORT = "3306";
    private static final String DB_NAME = "Bdd_charroi_auto";
    private static final String DB_USER = "blaise";
    private static final String DB_PASSWORD = "Blaise@Mub5991";
    
    // URL de connexion pour MySQL 8.2.0
    private static final String DB_URL = "jdbc:mysql://" + DB_HOST + ":" + DB_PORT + "/" + DB_NAME 
            + "?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";
    
    private static final Logger LOGGER = Logger.getLogger(DatabaseConnection.class.getName());
    
    /**
     * Obtient une nouvelle connexion √† la base de donn√©es
     * CHAQUE APPEL RETOURNE UNE NOUVELLE CONNEXION pour √©viter les probl√®mes de connexion ferm√©e
     */
    public static Connection getConnection() {
        try {
            // Chargement du driver MySQL
            Class.forName("com.mysql.cj.jdbc.Driver");
            
            // Cr√©ation d'une NOUVELLE connexion √† chaque appel
            Connection newConnection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
            
            // Configuration de la connexion
            newConnection.setAutoCommit(true);
            
            LOGGER.fine("üîó Nouvelle connexion √† la base de donn√©es cr√©√©e");
            return newConnection;
            
        } catch (ClassNotFoundException e) {
            LOGGER.log(Level.SEVERE, "‚ùå Driver MySQL introuvable", e);
            throw new RuntimeException("Driver MySQL non trouv√©. Ajoutez mysql-connector-java √† votre projet.", e);
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå Erreur de connexion √† la base de donn√©es", e);
            throw new RuntimeException("Impossible de se connecter √† la base de donn√©es. V√©rifiez que WAMP est d√©marr√©.", e);
        }
    }
    
    /**
     * M√©thode d√©pr√©ci√©e - Les connexions sont maintenant ferm√©es automatiquement avec try-with-resources
     * @deprecated Utilisez try-with-resources dans vos DAO au lieu de fermer manuellement
     */
    @Deprecated
    public static void closeConnection() {
        LOGGER.info("‚ÑπÔ∏è closeConnection() est d√©pr√©ci√© - utilisez try-with-resources");
    }
    
    /**
     * Teste la connexion √† la base de donn√©es
     */
    public static boolean testConnection() {
        try (Connection conn = getConnection();
             Statement stmt = conn.createStatement()) {
            
            // Test simple avec une requ√™te
            stmt.executeQuery("SELECT 1");
            
            LOGGER.info("‚úÖ Test de connexion r√©ussi");
            return true;
            
        } catch (SQLException e) {
            LOGGER.log(Level.WARNING, "‚ùå Test de connexion √©chou√©", e);
            return false;
        }
    }
    
    /**
     * Obtient les informations de connexion
     */
    public static String getConnectionInfo() {
        return String.format(
            "üîó Configuration Base de Donn√©es:\n" +
            "   ‚Ä¢ Serveur: %s:%s\n" +
            "   ‚Ä¢ Base: %s\n" +
            "   ‚Ä¢ Utilisateur: %s\n" +
            "   ‚Ä¢ Driver: MySQL Connector/J\n" +
            "   ‚Ä¢ Version MySQL: 8.2.0 (WAMP)",
            DB_HOST, DB_PORT, DB_NAME, DB_USER
        );
    }
    
    /**
     * V√©rifie si WAMP est d√©marr√© en testant la connexion
     */
    public static boolean isWampRunning() {
        try {
            // Test de connexion basique au serveur MySQL
            Connection testConn = DriverManager.getConnection(
                "jdbc:mysql://" + DB_HOST + ":" + DB_PORT + "/information_schema" +
                "?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC", 
                DB_USER, DB_PASSWORD
            );
            testConn.close();
            return true;
        } catch (SQLException e) {
            LOGGER.warning("‚ö†Ô∏è WAMP ne semble pas d√©marr√© ou MySQL non accessible");
            return false;
        }
    }
    
    /**
     * Cr√©er la base de donn√©es si elle n'existe pas
     */
    public static boolean createDatabaseIfNotExists() {
        try {
            // Connexion √† MySQL sans sp√©cifier la base
            String baseUrl = "jdbc:mysql://" + DB_HOST + ":" + DB_PORT + 
                           "?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC";
            
            try (Connection conn = DriverManager.getConnection(baseUrl, DB_USER, DB_PASSWORD);
                 Statement stmt = conn.createStatement()) {
                
                // Cr√©er la base si elle n'existe pas
                String createDB = "CREATE DATABASE IF NOT EXISTS " + DB_NAME + 
                                " CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci";
                stmt.executeUpdate(createDB);
                
                LOGGER.info("‚úÖ Base de donn√©es cr√©√©e ou v√©rifi√©e: " + DB_NAME);
                return true;
            }
            
        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå Erreur lors de la cr√©ation de la base", e);
            return false;
        }
    }
}